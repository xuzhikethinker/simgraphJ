<?xml version="1.0"?><Project TYPE="ProjGraphDecomposition"><EvolvSteps><![CDATA[5]]></EvolvSteps><Source><![CDATA[Alone Vertex]]></Source><FileName><![CDATA[]]></FileName><DecompItems><![CDATA[0.5
<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns/graphml"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns/graphml">
<key id="state" for="node"/>
<graph edgedefault="directed">
<node id="1">
<data key="state">bla</data>
</node>
<node id="2">
<data key="state">end</data>
</node>
<node id="0">
<data key="state">beg</data>
</node>
<edge directed="false" source="0" target="1"/>
<edge directed="false" source="1" target="2"/>
</graph>
</graphml>
]]></DecompItems><DecompItems0><![CDATA[0.5
<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns/graphml"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns/graphml">
<key id="state" for="node"/>
<graph edgedefault="directed">
<node id="1">
<data key="state">beg</data>
</node>
<node id="0">
<data key="state">bla</data>
</node>
<node id="3">
<data key="state">bla</data>
</node>
<node id="2">
<data key="state">end</data>
</node>
<edge directed="false" source="1" target="0"/>
<edge directed="false" source="1" target="3"/>
<edge directed="false" source="3" target="2"/>
<edge directed="false" source="0" target="2"/>
<edge directed="false" source="0" target="2"/>
<edge directed="false" source="1" target="3"/>
</graph>
</graphml>
]]></DecompItems0><but><![CDATA[]]></but><Import><![CDATA[import java.util.Iterator;
import org.apache.commons.collections15.Factory;
import edu.uci.ics.jung.graph.Graph;
import budnik.engine.*;
import budnik.gui.*;
]]></Import><AgentFactory><![CDATA[{agentFactory = new Factory<Agent>(){
public Agent create() {
return new Agent();
}};}]]></AgentFactory><Scheduling><![CDATA[public void step(SimState state) {
}
public void start(){
super.start();
schedule.scheduleRepeating(this);
final Simulation sim= this;
new Thread(new Runnable()
{ public void run() {
long steps=0;
while(steps < Integer.MAX_VALUE)
{synchronized(sim)            		{
if (!schedule.step(sim)) break;
steps = schedule.getSteps();}
MainFrame.selectedUgnNode.update(); }
finish();}
}).start();}]]></Scheduling></Project>