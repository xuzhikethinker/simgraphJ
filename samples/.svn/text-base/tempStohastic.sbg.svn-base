<?xml version="1.0"?><Project TYPE="ProjGraphPAttachStohastic"><MethodGeneration><![CDATA[ByRule]]></MethodGeneration><FileName><![CDATA[D:\Doks\Yudin\LastWspSimLab\budNick\.\graphs\SeedsForPreeAttachments\graph.net]]></FileName><VerTable><![CDATA[0.1/n0.7/n0.2/n]]></VerTable><Code><![CDATA[import budnik.netPrefAttach.*;
import budnik.gui.*;
import budnik.compiling.*;
public class prefRule extends PrefAttechRule{
public double f(int k) {return 1.0;}
public int getM() {return Integer.MAX_VALUE;}	};
]]></Code><EvolvSteps><![CDATA[50]]></EvolvSteps><Directed><![CDATA[false]]></Directed><Import><![CDATA[import java.util.Iterator;
import org.apache.commons.collections15.Factory;
import edu.uci.ics.jung.graph.Graph;
import budnik.engine.*;
import budnik.gui.*;
]]></Import><AgentFactory><![CDATA[{agentFactory = new Factory<Agent>(){
public Agent create() {
return new Agent();
}};}]]></AgentFactory><Scheduling><![CDATA[public void step(SimState state) {
}
public void start(){
super.start();
schedule.scheduleRepeating(this);
final Simulation sim= this;
new Thread(new Runnable()
{ public void run() {
long steps=0;
while(steps < Integer.MAX_VALUE)
{synchronized(sim)            		{
if (!schedule.step(sim)) break;
steps = schedule.getSteps();}
MainFrame.selectedUgnNode.update(); }
finish();}
}).start();}]]></Scheduling></Project>